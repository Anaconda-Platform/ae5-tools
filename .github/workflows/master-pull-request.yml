# This is a basic workflow to help you get started with Actions

name: Pull Request

# Controls when the workflow will run
on:
  # Triggers the workflow on pull request events but only for the master branch
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
#  workflow_dispatch:

permissions:
  contents: read

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -el {0}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    - name: Install CloudFlare WARP Client
      #      https://pkg.cloudflareclient.com/install
      run: |
        curl https://pkg.cloudflareclient.com/pubkey.gpg | sudo gpg --yes --dearmor --output /usr/share/keyrings/cloudflare-warp-archive-keyring.gpg
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/cloudflare-warp-archive-keyring.gpg] https://pkg.cloudflareclient.com/ $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/cloudflare-client.list
        sudo apt update
        sudo apt install cloudflare-warp
    - name: Enable CloudFlare WARP Client
      #      https://pkg.cloudflareclient.com/install
      run: |
        warp-cli --accept-tos register
        warp-cli --accept-tos connect
        warp-cli --accept-tos set-mode warp+doh
    - name: Install dependencies
      # https://github.com/conda-incubator/setup-miniconda
      uses: conda-incubator/setup-miniconda@3b0f2504dd76ef23b6d31f291f4913fb60ab5ff3 # v2
      with:
        channels: default
        auto-activate-base: true
        activate-environment: github.action
        environment-file: environment.github.yml
    - name: Conda Info
      run: |
        conda info
    - name: Build the package
      env:
        AE5_HOSTNAME: aip.anaconda.com
        AE5_USERNAME: tooltest
        AE5_PASSWORD: ${{ secrets.AE5_PASSWORD }}
        AE5_ADMIN_USERNAME: admin
        AE5_ADMIN_PASSWORD: ${{ secrets.AE5_ADMIN_PASSWORD }}
        AE5_K8S_ENDPOINT: ssh:centos
        AE5_K8S_PORT: 23456
      run: |
        source $CONDA/etc/profile.d/conda.sh
        rm -f $CONDA/conda-bld/noarch/ae5-tools-*.tar.bz2
        conda install -y conda-build conda-verify anaconda-client
        conda build conda-recipe

#    - name: Upload to anaconda.org
#      if: github.event_name == 'push'
#      env:
#        ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
#      run: |
#        source $CONDA/bin/activate
#        git tag describe --exact-match --tags HEAD || export LABEL="--label dev"
#        anaconda --verbose --token $ANACONDA_TOKEN upload --user ae5-admin $LABEL $CONDA/conda-bld/noarch/ae5-tools-*.tar.bz2 --force

#    - name: Anaconda Project Setup
#      run: |
#        anaconda-project prepare --env-spec default
#    - name: Activate Anaconda Project Environment
#      run: |
#        conda activate envs/default
#    - name: Unit Tests
#      run: |
#        anaconda-project run test:unit
#    - name: Generate Coverage Report
#      run: |
#        anaconda-project run coverage
#    - name: Integration Tests
#      run: |
#        anaconda-project run test:integration
#    - name: SonarCloud Scan
#      uses: sonarsource/sonarcloud-github-action@master
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
